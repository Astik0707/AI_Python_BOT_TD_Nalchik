#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º
"""
import os
import sys
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_postgresql():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...")
    try:
        import asyncpg
        conn = await asyncpg.connect(
            host=os.environ.get('PG_HOST'),
            port=int(os.environ.get('PG_PORT', '5432')), 
            database=os.environ.get('PG_DB'),
            user=os.environ.get('PG_USER'),
            password=os.environ.get('PG_PASSWORD'),
            ssl=os.environ.get('PG_SSLMODE', 'prefer') == 'require',
            command_timeout=5
        )
        
        version = await conn.fetchval('SELECT version();')
        print(f"‚úÖ PostgreSQL OK: {version[:70]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables = ['bot_autorized_chats', 'agent_logs', 'training_clicks', 'clients', 'profit']
        for table in tables:
            exists = await conn.fetchval(
                "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = $1);",
                table
            )
            status = "‚úÖ" if exists else "‚ùå"
            print(f"  {status} –¢–∞–±–ª–∏—Ü–∞ {table}: {'–Ω–∞–π–¥–µ–Ω–∞' if exists else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")
        
        await conn.close()
        return True
    except Exception as e:
        print(f"‚ùå PostgreSQL ERROR: {e}")
        return False

def check_openai():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API...")
    try:
        from openai import OpenAI
        base_url = os.getenv('OPENAI_BASE_URL')
        if base_url:
            client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'), base_url=base_url)
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VPN –ø—Ä–æ–∫—Å–∏: {base_url}")
        else:
            client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI API")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        models = client.models.list()
        print("‚úÖ OpenAI API OK: –¥–æ—Å—Ç—É–ø –∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        model_names = [m.id for m in models.data]
        chat_model = os.getenv('OPENAI_MODEL_CHAT', 'gpt-4')
        whisper_model = os.getenv('OPENAI_MODEL_WHISPER', 'whisper-1')
        
        if chat_model in model_names or 'gpt-4' in model_names:
            print(f"‚úÖ Chat –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞: {chat_model}")
        else:
            print(f"‚ö†Ô∏è Chat –º–æ–¥–µ–ª—å {chat_model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        print(f"‚úÖ Whisper –º–æ–¥–µ–ª—å: {whisper_model} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)")
        return True
    except Exception as e:
        print(f"‚ùå OpenAI API ERROR: {e}")
        return False

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    try:
        import redis
        r = redis.Redis(
            host=os.environ.get('REDIS_HOST', 'localhost'),
            port=int(os.environ.get('REDIS_PORT', 6379)),
            db=int(os.environ.get('REDIS_DB', 0)),
            password=os.environ.get('REDIS_PASSWORD') or None,
            socket_connect_timeout=3
        )
        r.ping()
        print("‚úÖ Redis OK: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("   Redis –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    required_vars = [
        'TELEGRAM_BOT_TOKEN',
        'OPENAI_API_KEY',
        'PG_HOST',
        'PG_USER',
        'PG_PASSWORD',
        'PG_DB'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π Test_Bot_n8n")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok = check_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    pg_ok = await check_postgresql()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI
    openai_ok = check_openai()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    redis_ok = check_redis()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'‚úÖ' if env_ok else '‚ùå'}")
    print(f"   PostgreSQL: {'‚úÖ' if pg_ok else '‚ùå'}")
    print(f"   OpenAI API: {'‚úÖ' if openai_ok else '‚ùå'}")
    print(f"   Redis: {'‚úÖ' if redis_ok else '‚ö†Ô∏è'}")
    
    if env_ok and pg_ok and openai_ok:
        print("\nüéâ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
