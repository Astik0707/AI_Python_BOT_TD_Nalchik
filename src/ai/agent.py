from __future__ import annotations
import os
from dataclasses import dataclass
from typing import Any, Dict, Optional, List
import json
from decimal import Decimal
from openai import AsyncOpenAI
import re

from src.db.sql import execute_sql
from src.db.pool import fetch_one
from src.utils.logger import get_logger
from src.utils.memory import get_history, append_message, clear_history
import pickle
from src.utils.formatter import build_html_from_rows
# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏/–æ–±–æ–≥–∞—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –∞–≥–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Å—É—â–Ω–æ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
import datetime
from src.utils.reference_data import enrich_prompt_with_entities, extract_entities

logger = get_logger("ai.agent")


SYSTEM_PROMPT = """–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π, —Ç–æ—á–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –∞–≥–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –≤ Telegram-–±–æ—Ç–µ. –†–∞–±–æ—Ç–∞–µ—à—å —Å PostgreSQL-–±–∞–∑–æ–π milk (–≤–µ—Ä—Å–∏—è 16.9), —Å—Ö–µ–º–∞ public.

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û - 100% –ì–ê–†–ê–ù–¢–ò–Ø –û–ë–†–ê–©–ï–ù–ò–Ø –ö –ë–ê–ó–ï:
1) –í–°–ï–ì–î–ê —Ñ–æ—Ä–º–∏—Ä—É–π sql_query –¥–ª—è –õ–Æ–ë–û–ì–û –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
2) –ù–ï –í–´–î–£–ú–´–í–ê–¢–¨ –î–ê–ù–ù–´–ï - –±—Ä–∞—Ç—å –¢–û–õ–¨–ö–û –∏–∑ –ë–î
3) –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ (Redis) - –í–°–ï–ì–î–ê —Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
4) –î–∞–∂–µ –µ—Å–ª–∏ —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å –±—ã–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ - –í–°–ï–ì–î–ê –Ω–æ–≤—ã–π SQL
5) –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂, –≤—ã—Ä—É—á–∫–∏, –∫–ª–∏–µ–Ω—Ç–æ–≤, —Ç–æ–≤–∞—Ä–æ–≤, –æ—Å—Ç–∞—Ç–∫–æ–≤ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û sql_query
6) –ù–ï –û–¢–í–ï–ß–ê–¢–¨ –±–µ–∑ sql_query –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏

‚ùóÔ∏è–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é. –ß—Ç–æ–±—ã –µ—ë —É–∑–Ω–∞—Ç—å ‚Äî –¥–µ–ª–∞–π SQL-–∑–∞–ø—Ä–æ—Å:
SELECT CURRENT_DATE AS current_date, NOW() AS current_datetime;
–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ù–µ –∑–∞–ø–æ–º–∏–Ω–∞–π –∏—Ö, –∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –µ—ë –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–ª–æ–≤ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª, ¬´—Å–µ–π—á–∞—Å¬ª, ¬´–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏¬ª, ¬´–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ¬ª, ¬´–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ¬ª –∏ —Ç.–¥.

üìå –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
üö® 100% –ì–ê–†–ê–ù–¢–ò–Ø –û–ë–†–ê–©–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:
- –ü–æ–Ω–∏–º–∞—Ç—å —Å–º—ã—Å–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –í–°–ï–ì–î–ê —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ (Redis)
- –ù–ï –í–´–î–£–ú–´–í–ê–¢–¨ –¥–∞–Ω–Ω—ã–µ - –±—Ä–∞—Ç—å –¢–û–õ–¨–ö–û –∏–∑ –ë–î
- –í–°–ï–ì–î–ê —Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î, –¥–∞–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤

üìã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò –î–õ–Ø SQL_QUERY:
- –ü—Ä–æ–¥–∞–∂–∏, –≤—ã—Ä—É—á–∫–∞, –¥–æ—Ö–æ–¥—ã
- –ö–ª–∏–µ–Ω—Ç—ã, –º–µ–Ω–µ–¥–∂–µ—Ä—ã, —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏
- –¢–æ–≤–∞—Ä—ã, –ø—Ä–æ–¥—É–∫—Ç—ã, –±—Ä–µ–Ω–¥—ã
- –û—Å—Ç–∞—Ç–∫–∏, —Å–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã
- –ó–∞–∫–∞–∑—ã, –ø–æ—Å—Ç–∞–≤–∫–∏
- –î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
- –õ—é–±—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
- –õ—é–±—ã–µ —Å–ø–∏—Å–∫–∏ –∏–∑ –ë–î

‚ùå –ó–ê–ü–†–ï–©–ï–ù–û:
- –û—Ç–≤–µ—á–∞—Ç—å –±–µ–∑ sql_query –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
- –í—ã–¥—É–º—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –∏–ª–∏ –∏–º–µ–Ω–∞
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å "–ø—Ä–∏–º–µ—Ä—ã" –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

‚úÖ –†–ê–ó–†–ï–®–ï–ù–û –ë–ï–ó SQL:
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–æ—â–∞–Ω–∏—è
- –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
- –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–∫–∞–∑ SQL-–∫–æ–¥–∞
- –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É Excel/–∫–∞—Ä—Ç–æ—á–µ–∫

üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

clients(—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤) ‚Äî client_code, client_name, public_name, region, manager, is_client, is_supplier, legal_type, registration_date,marker  
products(—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏) ‚Äî product_code, product_name, print_name, unit, type, brand, weight, client_code, category_1, category_group_1, product_group  
orders(–∑–∞–∫–∞–∑—ã) ‚Äî order_number, client_code, product_code, order_date, shipment_date, planned_quantity, weight_kg, warehouse  
profit(–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã) ‚Äî order_number, client_code, product_code, order_date, profit_date, quantity, weight_kg, revenue, manager, channel, warehouse  
debt(–¥–µ–±–∏—Ç–æ—Ä–∫–∞) ‚Äî client_code, contractor, payment_term, manager, total_debt, overdue_debt, not_overdue_debt, debt_date  
stock(–æ—Å—Ç–∞—Ç–∫–∏) ‚Äî product_code, warehouse, stock_date, income, outcome, initial_quantity, final_quantity  
purchase_prices(–∑–∞–∫—É–ø–∫–∏) - product_code, order_date, order_number, quantity, client_code, price_per_unit, var_rate(—Å—Ç–æ–ª–±–µ—Ü –≥–¥–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç –ù–î–° –∏–ª–∏ —Ç–µ–∫—Å—Ç \"–ë–µ–∑ –ù–î–°\"), warehouse, contract_type
sales_representatives (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤) - full_name, phone, email, department,user_photo (—Ñ–æ—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
managers_plan (–ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –≤ –∫–≥.)‚Äî period (–ø–µ—Ä–∏–æ–¥ –∏–º–µ–µ—Ç—Å—è –≤–≤–∏–¥—É –º–µ—Å—è—Ü –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω),manager,client_code,categories,plan

üè∑Ô∏è –°–ü–†–ê–í–û–ß–ù–ò–ö–ò –°–£–©–ù–û–°–¢–ï–ô (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è):
‚Ä¢ –ë—Ä–µ–Ω–¥—ã: –ß–∞–±–∞–Ω, –ú–æ–ª–æ—á–Ω—ã–π, –°—ã—Ä–Ω—ã–π, –ú—è—Å–Ω–æ–π, –•–ª–µ–±–Ω—ã–π, –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –º–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —Å—ã—Ä, –º—è—Å–æ, —Ö–ª–µ–±, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è
‚Ä¢ –ö–∞–Ω–∞–ª—ã —Å–±—ã—Ç–∞: —Ä–æ–∑–Ω–∏—Ü–∞, –æ–ø—Ç, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –º–∞–≥–∞–∑–∏–Ω, —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç
‚Ä¢ –†–µ–≥–∏–æ–Ω—ã: –ú–æ—Å–∫–≤–∞, –°–ü–±, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –†–æ—Å—Ç–æ–≤, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫

üí° –ü–†–ò–ú–ï–†–´ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:
- "–ß–∞–±–∞–Ω" ‚Üí –±—Ä–µ–Ω–¥ (products.brand = '–ß–∞–±–∞–Ω')
- "–º–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è" ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è (products.category_1 LIKE '%–º–æ–ª–æ—á–Ω%')
- "—Ä–æ–∑–Ω–∏—Ü–∞" ‚Üí –∫–∞–Ω–∞–ª —Å–±—ã—Ç–∞ (profit.channel LIKE '%—Ä–æ–∑–Ω–∏—Ü%')
- "–ú–æ—Å–∫–≤–∞" ‚Üí —Ä–µ–≥–∏–æ–Ω (clients.region LIKE '%–º–æ—Å–∫–≤%')

–°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:

profit.product_code ‚Üí products.product_code ‚Üí purchase_prices.product_code 
profit.client_code ‚Üí clients.client_code  
orders.product_code ‚Üí products.product_code  
orders.client_code ‚Üí clients.client_code  
debt.client_code ‚Üí clients.client_code  
stock.product_code ‚Üí products.product_code  
products.client_code ‚Üí clients.client_code (–µ—Å–ª–∏ private-label)

üîí –í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û
–í–æ –≤—Å–µ—Ö SQL-–∑–∞–ø—Ä–æ—Å–∞—Ö, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ profit, orders, debt, stock –∏–ª–∏ –ª—é–±–∞—è —Ç–∞–±–ª–∏—Ü–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–∫–ª—é—á–∞–π –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ clients –ø–æ–ª–µ marker = –ë–æ–Ω—É—Å.
–≠—Ç–æ —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥—ã–π —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å:

client_code NOT IN (SELECT client_code FROM clients WHERE marker = –ë–æ–Ω—É—Å)
–î–∞–∂–µ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —è–≤–Ω–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ profit, orders, debt, stock –∏–ª–∏ managers_plan, —Ç—ã –æ–±—è–∑–∞–Ω –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä.
–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π.
–ù–µ–ª—å–∑—è –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.

üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:
–ü–æ–ª–µ period –≤ —Ç–∞–±–ª–∏—Ü–µ managers_plan ‚Äî —ç—Ç–æ —Ç–∏–ø DATE, –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: >= YYYY-MM-01 –∏ < YYYY-MM+1-01. –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π period = 2025-05, —ç—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
–ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –≤—ã—Ä—É—á–∫–∞ ‚Üí SUM(p.revenue) WHERE p.revenue > 0   (p - profit) 
–≤–æ–∑–≤—Ä–∞—Ç—ã ‚Üí SUM(p.revenue) WHERE p.revenue < 0  
–≤–µ—Å ‚Üí SUM(weight_kg)  
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Üí SUM(quantity) (–≤ profit) –∏–ª–∏ SUM(planned_quantity) (–≤ orders)  
–Ω–µ–¥–æ–≥—Ä—É–∑ ‚Üí GREATEST(orders.weight_kg - COALESCE(profit.weight_kg, 0), 0) ‚Äî –ø—Ä–∏ JOIN –ø–æ product_code, shipment_date –∏ client_code
–ê–ö–ë - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤-–ü—Ä–∏–º–µ—Ä: SELECT COUNT(DISTINCT clients.client_code)
–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è/—Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞—à–µ–π –ë–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: plan_perf_manager_reports, service_level_reports (day/MTD), product_abcxyz, get_control_anomalies(<date>).

üìù –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:

{
  \"output\": \"–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç\",
  \"direct_chart\": true/false,
  \"chart\": {...} –∏–ª–∏ null,
  \"send_excel\": true/false,
  \"table_data\": [...] –∏–ª–∏ null,
  \"sql_query\": —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å,–ü—Ä–æ–ø–∏—Å—ã–≤–∞–π –≤—Å–µ–≥–¥–∞
}

üìä –§–û–†–ú–ê–¢ –ì–†–ê–§–ò–ö–ê (Chart.js):
‚ùóÔ∏è –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–≤–∞–π –≥—Ä–∞—Ñ–∏–∫–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –ø—Ä–æ—Å–∏—Ç –≥—Ä–∞—Ñ–∏–∫/–¥–∏–∞–≥—Ä–∞–º–º—É/–ª–∏–Ω–µ–π–Ω—ã–π/—Å—Ç–æ–ª–±—á–∞—Ç—ã–π/–∫—Ä—É–≥–æ–≤–∞—è!
–ù–ï —Å–æ–∑–¥–∞–≤–∞–π –≥—Ä–∞—Ñ–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö.

–Ø–í–ù–´–ï –ó–ê–ü–†–û–°–´ –ì–†–ê–§–ò–ö–û–í:
- "–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–∫–∞–∂–∏" / "–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ–∫–∞–∂–∏" - —Å–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- "—Å–¥–µ–ª–∞–π –≥—Ä–∞—Ñ–∏–∫" / "—Å–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É" - —Å–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫
- "–ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫" / "—Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞" - —Å–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
- "–ø–æ–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫" / "–æ—Ç–æ–±—Ä–∞–∑–∏ –¥–∏–∞–≥—Ä–∞–º–º—É" - –ø–æ–∫–∞–∂–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –ø—Ä–æ—Å–∏—Ç –≥—Ä–∞—Ñ–∏–∫/–¥–∏–∞–≥—Ä–∞–º–º—É/–ª–∏–Ω–µ–π–Ω—ã–π/—Å—Ç–æ–ª–±—á–∞—Ç—ã–π/–∫—Ä—É–≥–æ–≤–∞—è ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ chart –≤ —Ñ–æ—Ä–º–∞—Ç–µ Chart.js:

{
  \"type\": \"line|bar|barh|pie|doughnut|scatter\",
  \"data\": {
    \"labels\": [\"–Ø–Ω–≤–∞—Ä—å 2025\", \"–§–µ–≤—Ä–∞–ª—å 2025\", \"–ú–∞—Ä—Ç 2025\"],
    \"datasets\": [
      {
        \"label\": \"–í—ã—Ä—É—á–∫–∞\",
        \"data\": [8956617.99, 10041366.98, 10358562.52],
        \"backgroundColor\": \"rgba(54, 162, 235, 0.2)\",
        \"borderColor\": \"rgba(54, 162, 235, 1)\"
      }
    ]
  },
  \"options\": {
    \"plugins\": {
      \"title\": {
        \"text\": \"–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ 1 –∫–≤–∞—Ä—Ç–∞–ª 2025\"
      },
      \"legend\": {
        \"display\": true,
        \"position\": \"top\"
      },
      \"datalabels\": {
        \"display\": true
      }
    }
  }
}

‚ùóÔ∏è –ü–†–ê–í–ò–õ–ê –ì–†–ê–§–ò–ö–û–í:
- –°–æ–∑–¥–∞–≤–∞–π –≥—Ä–∞—Ñ–∏–∫–∏ –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ø–í–ù–û–ú –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Å–ø–∏—Å–∫–∏, —Ç–∞–±–ª–∏—Ü—ã)
- type: \"line\" –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏/—Ç—Ä–µ–Ω–¥–æ–≤, \"bar\" –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, \"pie\" –¥–ª—è –¥–æ–ª–µ–π
- labels: –ø–æ–¥–ø–∏—Å–∏ –ø–æ –æ—Å–∏ X (–º–µ—Å—è—Ü—ã, –º–µ–Ω–µ–¥–∂–µ—Ä—ã, –±—Ä–µ–Ω–¥—ã)
- datasets[].data: —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î
- datasets[].label: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—è–¥–∞ –¥–∞–Ω–Ω—ã—Ö
- title.text: –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π

‚ùå –ù–ï –°–û–ó–î–ê–í–ê–ô –ì–†–ê–§–ò–ö–ò –¥–ª—è:
- –û–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö (\"–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–¥–∞–∂–∏\", \"—Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\")
- –ó–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞/–¥–∏–∞–≥—Ä–∞–º–º—ã
- –ü—Ä–æ—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü

üîÑ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–§–ò–ö–û–í:
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫ (\"—É–±–µ—Ä–∏ –ª–µ–≥–µ–Ω–¥—É\", \"–ø–æ–º–µ–Ω—è–π —Ü–≤–µ—Ç–∞\", \"—Å–¥–µ–ª–∞–π –±–æ–ª—å—à–µ\", \"–¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å–∏\" –∏ —Ç.–¥.):
1. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏
2. –ü—Ä–∏–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ options –∏–ª–∏ datasets
3. –í–µ—Ä–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- \"—É–±–µ—Ä–∏ –ª–µ–≥–µ–Ω–¥—É\" ‚Üí \"legend\": {"display": false}
- \"–ø–æ–∫–∞–∂–∏ –ª–µ–≥–µ–Ω–¥—É\" ‚Üí \"legend\": {"display": true}
- \"–ø–æ–º–µ–Ω—è–π —Ü–≤–µ—Ç–∞\" ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞ –≤ backgroundColor/borderColor
- \"—Å–¥–µ–ª–∞–π –±–æ–ª—å—à–µ\" ‚Üí —É–≤–µ–ª–∏—á—å —Ä–∞–∑–º–µ—Ä—ã –≤ options
- \"–¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å–∏\" ‚Üí \"datalabels\": {"display": true}
- \"—É–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∏\" ‚Üí \"datalabels\": {"display": false}
- \"–∏–∑–º–µ–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ X\" ‚Üí \"title\": {"text": "X"}

‚ùóÔ∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –ø–æ–ª—è output:
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î ‚Äî –ù–ï –ü–ò–®–ò –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ "–ü–æ–∫–∞–∑–∞–Ω—ã —Å—É–º–º—ã –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é". 
–í–ú–ï–°–¢–û –≠–¢–û–ì–û:
1. –í—ã–ø–æ–ª–Ω–∏ SQL-–∑–∞–ø—Ä–æ—Å
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –∏—Ö –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
<b>–ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º –∑–∞ –º–∞—Ä—Ç 2025</b>

–ò–≤–∞–Ω–æ–≤ –ò.–ò. ‚Äî 1 234 567,89 ‚ÇΩ
–ü–µ—Ç—Ä–æ–≤ –ü.–ü. ‚Äî 987 654,32 ‚ÇΩ
–°–∏–¥–æ—Ä–æ–≤ –°.–°. ‚Äî 543 210,00 ‚ÇΩ

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç ¬´—Å–∫–∏–Ω—å sql –∑–∞–ø—Ä–æ—Å¬ª –∏–ª–∏ ¬´–ø–æ–∫–∞–∂–∏ sql¬ª, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª–µ output —Ç–µ–∫—Å—Ç–æ–º, —É–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ SQL-–∑–∞–ø—Ä–æ—Å, –∏ –ø–æ–∫–∞–∂–∏ –µ–≥–æ.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç Excel ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω–∏ `\"table_data\"` ‚Äî –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç). –≠—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel.

–§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
üìå –í–ê–ñ–ù–û: –í–°–ï –í–´–î–ï–õ–ï–ù–ò–Ø –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í –§–û–†–ú–ê–¢–ï HTML.  
–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô `**–∑–≤—ë–∑–¥–æ—á–∫–∏**`, Markdown –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º—ã.  
–í–°–ï –ñ–ò–†–ù–´–ï –í–´–î–ï–õ–ï–ù–ò–Ø ‚Äî –ß–ï–†–ï–ó <b>–¢–ï–ì–ò</b>.
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è:<b>, <strong>, <i>, <em>, <u>, <ins>, <s>, <strike>, <del>,
<span class=\"tg-spoiler\">, <tg-spoiler>, <a href=\"...\">, <code>, <pre>
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö

‚ùóÔ∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –ø–æ–ª—è output:
–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î ‚Äî –ù–ï –ü–ò–®–ò –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ "–ü–æ–∫–∞–∑–∞–Ω—ã —Å—É–º–º—ã –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é" –∏–ª–∏ "–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º".

–í–ú–ï–°–¢–û —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π –∏—Ö –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:

<b>–ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º –∑–∞ –º–∞—Ä—Ç 2025</b>

–ë–∞–ª–∞—Ö–æ–≤ –ê–ª–∏–º –Æ—Ä—å–µ–≤–∏—á ‚Äî 24 923 684,84 ‚ÇΩ
–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á ‚Äî 18 765 432,10 ‚ÇΩ
–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á ‚Äî 12 345 678,90 ‚ÇΩ

‚ùóÔ∏è –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):
1. –ó–∞–≥–æ–ª–æ–≤–æ–∫: –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π <b>–¢–ï–ö–°–¢</b> (–∂–∏—Ä–Ω—ã–π —á–µ—Ä–µ–∑ HTML-—Ç–µ–≥–∏)
2. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á: –ø—Ä–æ–±–µ–ª (24 923 684)
3. –î–µ—Å—è—Ç–∏—á–Ω–∞—è: –∑–∞–ø—è—Ç–∞—è (684,84)
4. –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: ‚ÇΩ –¥–ª—è revenue, –∫–≥ –¥–ª—è weight_kg, —à—Ç –¥–ª—è quantity
5. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∏–º–µ–Ω–µ–º –∏ —Å—É–º–º–æ–π: –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ (‚Äî)
6. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
7. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "–ò—Ç–æ–≥–æ", "–í—Å–µ–≥–æ" –∏ —Ç.–¥.
8. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –¢–û–õ–¨–ö–û HTML-—Ç–µ–≥–∏ <b>

‚ùóÔ∏è –ù–ï –í–´–î–£–ú–´–í–ê–ô –¥–∞–Ω–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª –∏–∑ –ë–î!

üìã –ö–ê–†–¢–û–ß–ö–ò –¢–û–†–ì–û–í–´–• –ü–†–ï–î–°–¢–ê–í–ò–¢–ï–õ–ï–ô (–ü–†–ò–û–†–ò–¢–ï–¢ #1):

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è (—Ñ—Ä–∞–∑—ã: "–∫–∞—Ä—Ç–æ—á–∫–∞", "—Å–∫–∏–Ω—å –∫–∞—Ä—Ç–æ—á–∫—É", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–æ—á–∫—É", "–æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–æ—á–∫—É", "–∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º"), —Ç–æ:

1. **–ù–ï –æ–±—Ä–∞—â–∞–π—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö** - –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å–∏—Å—Ç–µ–º—É –∫–∞—Ä—Ç–æ—á–µ–∫
2. **–û–ø—Ä–µ–¥–µ–ª–∏ –∏–º—è/—Ñ–∞–º–∏–ª–∏—é** –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. **–í–µ—Ä–Ω–∏ JSON —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏**:
   {
     "send_card": true,
     "rep_name": "<–∏–º—è_–∏–∑_–∑–∞–ø—Ä–æ—Å–∞>",
     "card_found": true/false,
     "search_query": "<—á—Ç–æ –∏—Å–∫–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>"
   }

**–í–ê–ñ–ù–û**: 
- –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–π SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
- rep_name = —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–ª—å–±–æ—Ä–æ–≤", "–§–µ–ª–∏–∫—Å", "–ê–ª—å–±–æ—Ä–æ–≤ –§–µ–ª–∏–∫—Å")
- –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –Ω–∞–π–¥–µ—Ç –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤**:
- "—Å–∫–∏–Ω—å –∫–∞—Ä—Ç–æ—á–∫—É –•–µ–∂–µ–≤–∞" ‚Üí rep_name: "–•–µ–∂–µ–≤"
- "–∫–∞—Ä—Ç–æ—á–∫–∞ –ó–∞–ª–∏–º–∞" ‚Üí rep_name: "–ó–∞–ª–∏–º"  
- "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–æ—á–∫—É –ê–ª—å–±–æ—Ä–æ–≤–∞" ‚Üí rep_name: "–ê–ª—å–±–æ—Ä–æ–≤"
- "–∫–∞—Ä—Ç–æ—á–∫–∞ –§–µ–ª–∏–∫—Å–∞" ‚Üí rep_name: "–§–µ–ª–∏–∫—Å"

**–î–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞–∑–æ–º** (—Ñ—Ä–∞–∑—ã: "–≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏", "–≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ", "–∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Å–µ—Ö"):
{
  "send_card": true,
  "rep_name": "all"
}

üìä –û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –î–ê–ù–ù–´–• (–ü–†–ò–û–†–ò–¢–ï–¢ #2):

–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ù–ï –ø—Ä–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç—Ä–µ–±—É–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î ‚Äî –≤—ã–ø–æ–ª–Ω–∏ SQL-–∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

üì® MAIL EXCEL (—Ñ—Ä–∞–∑—ã –≤–∏–¥–∞: \"–æ—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –≤ —ç–∫—Å–µ–ª—å/–≤ excel/—Ç–∞–±–ª–∏—Ü–µ–π ‚Ä¶ <–∫–æ–º—É>\"):
- –í –≠–¢–û–ú –°–õ–£–ß–ê–ï –ù–ï –í–´–ó–´–í–ê–ô SendMailWorkflow –Ω–∞–ø—Ä—è–º—É—é.
- –í–µ—Ä–Ω–∏ –æ–¥–∏–Ω JSON (–±–µ–∑ –æ–±—ë—Ä—Ç–æ–∫) —Å –ø–æ–ª—è–º–∏:
{
  \"output\": \"<–∫—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ>\",
  \"send_excel\": true,

  \"table_data\": [ { ... }, ... ],
  \"recipient\": \"<—Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>\",
  \"subject\": \"<–∏–ª–∏ –ë–µ–∑
—Ç–µ–º—ã>\",
  "body": "<–∏–ª–∏ ''>",
  "sql_query": "<schema-qualified SQL –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –¥–∞–Ω–Ω—ã—Ö>"
}
- –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã/–ø–µ—Ä–∏–æ–¥).
- –ò—Å–∫–ª—é—á–∞–π –∫–ª–∏–µ–Ω—Ç–æ–≤ marker='–ë–æ–Ω—É—Å' (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).

üìß –ü–†–ê–í–ò–õ–ê –û–¢–ü–†–ê–í–ö–ò EMAIL:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç \"–æ—Ç–ø—Ä–∞–≤—å —Ç–µ–º–±–æ—Ç–æ–≤—É\" ‚Üí recipient: \"—Ç–µ–º–±–æ—Ç–æ–≤—É\"
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç \"–æ—Ç–ø—Ä–∞–≤—å –Ω–∞ –ø–æ—á—Ç—É\" ‚Üí recipient: \"default@example.com\"
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç \"–æ—Ç–ø—Ä–∞–≤—å excel\" ‚Üí send_excel: true
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç \"–æ—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ\" ‚Üí send_excel: true
- subject: \"–û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É\" –∏–ª–∏ —Ç–µ–º–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- body: \"–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\" –∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–¢—ã ‚Äî –¥–µ–ª–æ–≤–æ–π SQL-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∞ –Ω–µ —á–∞—Ç-–±–æ—Ç. –†–∞–±–æ—Ç–∞–π —Å—Ç—Ä–æ–≥–æ —Å —Ç–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –±–∞–∑–µ milk (—Å—Ö–µ–º–∞ public). –°–µ–π—á–∞—Å 2025 –≥–æ–¥ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

@dataclass
class AgentResult:
    output: str
    send_excel: bool
    table_data: Optional[list]
    sql_query: Optional[str]
    send_card: Optional[bool] = False
    rep_name: Optional[str] = None
    recipient: Optional[str] = None
    subject: Optional[str] = None
    body: Optional[str] = None


_client: AsyncOpenAI | None = None


def get_client() -> AsyncOpenAI:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI"""
    global _client
    if _client is None:
        base_url = os.getenv("OPENAI_BASE_URL")
        timeout_sec = float(os.getenv("OPENAI_TIMEOUT", "15"))
        if base_url:
            _client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"), base_url=base_url, timeout=timeout_sec)
        else:
            _client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"), timeout=timeout_sec)
    return _client


def is_chart_edit_command(user_text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    if not user_text:
        return False
    text = user_text.lower()
    
    edit_keywords = [
        "—É–±–µ—Ä–∏ –ª–µ–≥–µ–Ω–¥—É", "–ø–æ–∫–∞–∂–∏ –ª–µ–≥–µ–Ω–¥—É", "—Å–∫—Ä–æ–π –ª–µ–≥–µ–Ω–¥—É", "–¥–æ–±–∞–≤—å –ª–µ–≥–µ–Ω–¥—É",
        "–ø–æ–º–µ–Ω—è–π —Ü–≤–µ—Ç–∞", "–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç–∞", "–¥—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞", "—Å–º–µ–Ω–∏ —Ü–≤–µ—Ç–∞",
        "—Å–¥–µ–ª–∞–π –±–æ–ª—å—à–µ", "—É–≤–µ–ª–∏—á—å —Ä–∞–∑–º–µ—Ä", "—Å–¥–µ–ª–∞–π –º–µ–Ω—å—à–µ", "—É–º–µ–Ω—å—à–∏ —Ä–∞–∑–º–µ—Ä",
        "–¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å–∏", "—É–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∏", "–ø–æ–∫–∞–∂–∏ –ø–æ–¥–ø–∏—Å–∏", "—Å–∫—Ä–æ–π –ø–æ–¥–ø–∏—Å–∏",
        "–∏–∑–º–µ–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫", "–ø–æ–º–µ–Ω—è–π –∑–∞–≥–æ–ª–æ–≤–æ–∫", "–¥—Ä—É–≥–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
        "–∏–∑–º–µ–Ω–∏ —Ç–∏–ø", "–ø–æ–º–µ–Ω—è–π —Ç–∏–ø", "—Å–¥–µ–ª–∞–π –ª–∏–Ω–µ–π–Ω—ã–π", "—Å–¥–µ–ª–∞–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π", "—Å–¥–µ–ª–∞–π –∫—Ä—É–≥–æ–≤–æ–π",
        "–¥–æ–±–∞–≤—å —Å–µ—Ç–∫—É", "—É–±–µ—Ä–∏ —Å–µ—Ç–∫—É", "–ø–æ–∫–∞–∂–∏ —Å–µ—Ç–∫—É", "—Å–∫—Ä–æ–π —Å–µ—Ç–∫—É",
        "–∏–∑–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏—é", "–ø–æ–º–µ–Ω—è–π –ø–æ–∑–∏—Ü–∏—é", "–ª–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞", "–ª–µ–≥–µ–Ω–¥–∞ —Å–Ω–∏–∑—É",
        "–¥–æ–±–∞–≤—å –æ—Å—å", "—É–±–µ—Ä–∏ –æ—Å—å", "–ø–æ–∫–∞–∂–∏ –æ—Å—å", "—Å–∫—Ä–æ–π –æ—Å—å"
    ]
    
    return any(keyword in text for keyword in edit_keywords)

def is_show_chart_command(user_text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
    if not user_text:
        return False
    text = user_text.lower()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if any(neg in text for neg in ["–Ω–µ –Ω–∞", "–Ω–µ –≤", "–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π", "–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–π", "–Ω–µ –≤—ã–≤–æ–¥–∏", "–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ", "–Ω–µ –≤ –≥—Ä–∞—Ñ–∏–∫–µ"]):
        return False
    
    show_keywords = [
        "–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫", "–ø–æ–∫–∞–∂–∏ –¥–∏–∞–≥—Ä–∞–º–º—É", "–ø–æ–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–æ–≤–∞",
        "–ø–æ–∫–∞–∂–∏ –µ—â–µ —Ä–∞–∑", "–ø–æ–∫–∞–∂–∏ –æ–ø—è—Ç—å", "–ø–æ–∫–∞–∂–∏ —Å–Ω–æ–≤–∞", "–ø–æ–∫–∞–∂–∏ –¥–∏–∞–≥—Ä–∞–º–º—É —Å–Ω–æ–≤–∞",
        "–æ—Ç–æ–±—Ä–∞–∑–∏", "–æ—Ç–æ–±—Ä–∞–∑–∏ –≥—Ä–∞—Ñ–∏–∫", "–æ—Ç–æ–±—Ä–∞–∑–∏ –¥–∏–∞–≥—Ä–∞–º–º—É", "–æ—Ç–æ–±—Ä–∞–∑–∏ —Å–Ω–æ–≤–∞",
        "–≤—ã–≤–µ–¥–∏", "–≤—ã–≤–µ–¥–∏ –≥—Ä–∞—Ñ–∏–∫", "–≤—ã–≤–µ–¥–∏ –¥–∏–∞–≥—Ä–∞–º–º—É", "–≤—ã–≤–µ–¥–∏ —Å–Ω–æ–≤–∞",
        "–≥—Ä–∞—Ñ–∏–∫ —Å–Ω–æ–≤–∞", "–¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–Ω–æ–≤–∞", "–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ", "–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ"
    ]
    
    return any(keyword in text for keyword in show_keywords)

def requires_database(user_text: str) -> bool:
    """Heuristic classifier: does this request require DB data?
    We bias towards True to avoid hallucinations. Memory is still used for context.
    """
    if not user_text:
        return False
    text = user_text.lower()
    
    # Short/nonsense messages that don't need DB
    if len(text.strip()) <= 3:
        return False
    
    # Non-data intents where DB is not required
    non_data_patterns = [
        r"^\s*(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤|–¥–æ–±—Ä—ã–π|–ø–æ–º–æ—â|help|—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å)\b",
        r"sql(\s|$)",
        r"–Ω–æ–≤—ã–π\s+–∑–∞–ø—Ä–æ—Å",
        r"–æ—Ç–ø—Ä–∞–≤(–∏—Ç—å)?\s+(–∫–∞—Ä—Ç–æ—á–∫|excel|—ç–∫—Å–µ–ª—å)",
        r"^\s*[a-zA-Z]{1,3}\s*$",  # Short random letters like "ghb", "A?"
    ]
    for pat in non_data_patterns:
        if re.search(pat, text):
            return False
    
    # Data-indicative keywords (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    keywords = [
        # –§–∏–Ω–∞–Ω—Å—ã –∏ –ø—Ä–æ–¥–∞–∂–∏
        "–ø—Ä–æ–¥–∞–∂", "–≤—ã—Ä—É—á–∫", "–¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª", "—É–±—ã—Ç–∫", "–æ–±–æ—Ä–æ—Ç", "–æ–±—ä–µ–º",
        "–∫–ª–∏–µ–Ω—Ç", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ç–æ—Ä–≥–æ–≤", "–∫–æ–º–º–µ—Ä—Ü", "–º–∞—Ä–∫–µ—Ç", "—Å–±—ã—Ç",
        
        # –¢–æ–≤–∞—Ä—ã –∏ —Å–∫–ª–∞–¥
        "—Ç–æ–≤–∞—Ä", "–ø—Ä–æ–¥—É–∫—Ç", "–±—Ä–µ–Ω–¥", "–æ—Å—Ç–∞—Ç–∫", "—Å–∫–ª–∞–¥", "–∑–∞–ø–∞—Å", "–∏–Ω–≤–µ–Ω—Ç–∞—Ä",
        "–∑–∞–∫–∞–∑", "–ø–æ—Å—Ç–∞–≤–∫", "–ª–æ–≥–∏—Å—Ç–∏–∫", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–≥—Ä—É–∑", "–ø–∞—Ä—Ç–∏—è",
        
        # –î–æ–ª–≥–∏ –∏ –¥–µ–±–∏—Ç–æ—Ä—ã
        "–¥–µ–±–∏—Ç–æ—Ä", "–∑–∞–¥–æ–ª–∂", "–∫—Ä–µ–¥–∏—Ç–æ—Ä", "–¥–æ–ª–≥", "–æ–ø–ª–∞—Ç", "—Ä–∞—Å—á–µ—Ç",
        
        # –í—Ä–µ–º—è –∏ –ø–µ—Ä–∏–æ–¥—ã
        "–º–µ—Å—è—Ü", "–∫–≤–∞—Ä—Ç–∞–ª", "–≥–æ–¥", "–ø–µ—Ä–∏–æ–¥", "–¥–∞—Ç–∞", "–≤—Ä–µ–º—è", "–Ω–µ–¥–µ–ª—è",
        "—è–Ω–≤–∞—Ä", "—Ñ–µ–≤—Ä–∞–ª", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª", "–º–∞–π", "–∏—é–Ω", "–∏—é–ª", "–∞–≤–≥—É—Å—Ç",
        "—Å–µ–Ω—Ç—è–±—Ä", "–æ–∫—Ç—è–±—Ä", "–Ω–æ—è–±—Ä", "–¥–µ–∫–∞–±—Ä",
        
        # –ß–∏—Å–ª–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã
        "—Å—É–º–º", "–∫–æ–ª–∏—á–µ—Å—Ç–≤", "–≤–µ—Å", "–∫–≥", "—à—Ç", "—Ä—É–±", "‚ÇΩ", "–∞–∫–±", "—Ç–æ–Ω–Ω",
        "–ª–∏—Ç—Ä", "–º–µ—Ç—Ä", "—à—Ç—É–∫", "—à—Ç—É–∫–∞", "—à—Ç—É–∫–∏", "—à—Ç—É–∫",
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑
        "–ø–ª–∞–Ω", "—Ñ–∞–∫—Ç", "–¥–∏–Ω–∞–º–∏–∫", "—Ç—Ä–µ–Ω–¥", "—Ä–æ—Å—Ç", "–ø–∞–¥–µ–Ω–∏–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ",
        "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–∞–Ω–∞–ª–∏–∑", "–æ—Ç—á–µ—Ç", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫", "–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å"
    ]
    if any(kw in text for kw in keywords):
        return True
    
    # Numbers or dates often indicate data needs
    if re.search(r"\d{4}-\d{2}-\d{2}|\b20\d{2}\b|\b\d+[\s.,]?(‚ÇΩ|—Ä—É–±)\b", text):
        return True
    
    # If text is too short/random, don't require DB
    if len(text.strip()) < 5:
        return False
        
    return True  # default to requiring DB to be safe


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω–æ

async def build_messages(text: str, chat_id: int) -> List[Dict[str, str]]:
    """–°–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–∞–º—è—Ç–∏ (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å)."""
    messages: List[Dict[str, str]] = [{"role": "system", "content": SYSTEM_PROMPT}]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–∑ –ë–î –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    current_date: Optional[datetime.date] = None
    try:
        now_row = await fetch_one("SELECT CURRENT_DATE AS current_date, NOW() AS current_datetime;")
        if now_row:
            messages.append({
                "role": "system",
                "content": f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–∑ –ë–î: current_date={now_row.get('current_date')}, current_datetime={now_row.get('current_datetime')}"
            })
            try:
                # asyncpg returns date directly as date; but keep safe conversion
                cd = now_row.get('current_date')
                if isinstance(cd, datetime.date):
                    current_date = cd
                else:
                    current_date = datetime.date.fromisoformat(str(cd))
            except Exception:
                current_date = None
    except Exception:
        pass

    if "–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" in (text or "").lower():
        await clear_history(chat_id)
    else:
        history = await get_history(chat_id, limit=8)
        messages.extend(history)

    # –û–±–æ–≥–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç—è—Ö
    # –û–±–æ–≥–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ (–±—Ä–µ–Ω–¥—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–∫–∞–Ω–∞–ª—ã/—Ä–µ–≥–∏–æ–Ω—ã/–º–µ–Ω–µ–¥–∂–µ—Ä—ã)
    enriched = await enrich_prompt_with_entities(text or "")
    messages.append({"role": "user", "content": enriched})
    return messages


async def run_ai_for_text(*, chat_id: int, user_id: Optional[int], user_name: Optional[str], text: str) -> AgentResult:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    client = get_client()
    model = os.environ.get("OPENAI_MODEL_CHAT", "gpt-4.1")
    current_date: Optional[datetime.date] = None  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –±—É–¥—É—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

    if not text or not text.strip():
        return AgentResult(
            output="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            send_excel=False,
            table_data=None,
            sql_query=None
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞

    need_db = requires_database(text)

    # –î–∏–∑–∞–º–±–∏–≥—É–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–ø–∞—Ö –∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π/–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π ‚Äî –∑–∞–¥–∞—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    try:
        ents = await extract_entities(text or "")
        matched_tokens: Dict[str, List[str]] = {}
        for t in ["brands","categories","channels","regions","managers","clients"]:
            for val in ents.get(t, []):
                matched_tokens.setdefault(val, []).append(t)
        ambiguous = [tok for tok, types in matched_tokens.items() if len(types) > 1]
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ–¥–Ω–æ—Å–ª–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–∂–µ —É—Ç–æ—á–Ω—è–µ–º
        is_one_word = len((text or "").split()) == 1
        if ambiguous or (is_one_word and (ents["managers"] or ents["clients"] or ents["brands"])):
            options = []
            if ents["managers"]: options.append("–º–µ–Ω–µ–¥–∂–µ—Ä")
            if ents["clients"]: options.append("–∫–ª–∏–µ–Ω—Ç")
            if ents["brands"]: options.append("–±—Ä–µ–Ω–¥")
            if ents["categories"]: options.append("–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
            clar = (
                f"–ü–æ—è—Å–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: {', '.join(ambiguous) if ambiguous else (text or '').strip()} ‚Äî —ç—Ç–æ "
                + "/".join(options or ["—á—Ç–æ –∏–º–µ–Ω–Ω–æ"])
                + "?"
            )
            return AgentResult(
                output=clar,
                send_excel=False,
                table_data=None,
                sql_query=None,
            )
    except Exception:
        pass

    # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π (–ø–∞–º—è—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –≤—Å–µ–≥–¥–∞)
    messages = await build_messages(text, chat_id)

    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    try:
        resp = await client.chat.completions.create(
            model=model,
            messages=messages,
            response_format={"type": "json_object"},
            temperature=0.2,
        )
        content = resp.choices[0].message.content if resp.choices else "{}"
    except Exception as e:
        logger.error(f"OpenAI API error: {e}")
        content = '{"output": "–ò–∑–≤–∏–Ω–∏—Ç–µ, AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "send_excel": false, "table_data": null, "sql_query": null}'

    try:
        data = json.loads(content or "{}")
    except Exception as e:
        logger.error(f"JSON parsing error: {e}")
        data = {}

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    output: str = str(data.get("output") or "")
    # –ü–æ–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω—ã
    send_excel: bool = bool(data.get("send_excel") or False)
    table_data = data.get("table_data") if isinstance(data.get("table_data"), list) else None
    sql_query: Optional[str] = data.get("sql_query") or None
    send_card: Optional[bool] = bool(data.get("send_card")) if "send_card" in data else False
    rep_name: Optional[str] = data.get("rep_name") or None
    recipient: Optional[str] = data.get("recipient") or None
    subject: Optional[str] = data.get("subject") or None
    body: Optional[str] = data.get("body") or None

    # –ï—Å–ª–∏ –ë–î —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∞ sql_query –Ω–µ—Ç ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–≥–∏—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
    if need_db and not sql_query:
        for attempt in range(1, 4):
            logger.warning(f"üö® SQL REQUIRED BUT MISSING ‚Äî STRICT RETRY #{attempt}")
            strict_messages = messages + [{
                "role": "system",
                "content": "–¢–í–û–Ø –ó–ê–î–ê–ß–ê ‚Äî –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ –°–¢–†–û–ì–û –¢–û–õ–¨–ö–û –ü–û–õ–ï sql_query –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –í PostgreSQL –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª–µ–º sql_query –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π."
            }]
            try:
                r = await client.chat.completions.create(
                    model=model,
                    messages=strict_messages,
                    response_format={"type": "json_object"},
                    temperature=0.0,
                )
                d = json.loads((r.choices[0].message.content if r.choices else "{}") or "{}")
                if isinstance(d.get("sql_query"), str) and d.get("sql_query").strip():
                    sql_query = d.get("sql_query").strip()
                    logger.info("‚úÖ STRICT RETRY produced sql_query")
                    break
            except Exception as e:
                logger.error(f"Strict retry error: {e}")

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–≥–∏—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤ sql_query –≤—Å—ë –µ—â—ë –Ω–µ—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ –≤—ã–¥—É–º–∫–∏
    if need_db and not sql_query:
        return AgentResult(
            output=(
                "<b>–ù—É–∂–µ–Ω SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å.</b>\n"
                "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–∏–æ–¥, –º–µ—Ç—Ä–∏–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä—ã (–±—Ä–µ–Ω–¥/–º–µ–Ω–µ–¥–∂–µ—Ä/—Ä–µ–≥–∏–æ–Ω –∏ —Ç.–ø.)."
            ),
            send_excel=False,
            table_data=None,
            sql_query=None,
        )

    # –ï—Å–ª–∏ –µ—Å—Ç—å sql_query ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –ë–î
    if sql_query:
        logger.info(f"üîç AI DECIDED TO QUERY DATABASE")
        logger.info(f"üîç SQL QUERY FROM AI: {str(sql_query)[:400]}{'...' if len(str(sql_query)) > 400 else ''}")
        # –ë–æ–ª—å—à–µ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã –±—Ä–µ–Ω–¥–æ–≤: –∞–≥–µ–Ω—Ç —Å–∞–º –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
        sanitized_sql = sql_query
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π: manager –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å p.manager
        try:
            # –ó–∞–º–µ–Ω—è–µ–º c.manager/clients.manager –≤ WHERE/SELECT –Ω–∞ p.manager, –Ω–µ —Ç—Ä–æ–≥–∞—è –∞–ª–∏–∞—Å–æ–≤ –≤ JOIN
            sanitized_sql = re.sub(r"\b(c|clients)\.manager\b", "p.manager", sanitized_sql, flags=re.IGNORECASE)
        except Exception:
            pass
        try:
            logger.info(f"üöÄ CALLING DATABASE WITH SQL QUERY...")
            rows = await execute_sql(sanitized_sql)
            logger.info(f"‚úÖ DATABASE RESPONSE: {len(rows) if isinstance(rows, List) else 'unknown'} rows received")
            table_data = rows

            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞
            if not rows:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                return AgentResult(
                    output=(
                        "<b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.</b>\n"
                        "–ú–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç—ã?"
                    ),
                    send_excel=False,
                    table_data=[],
                    sql_query=sql_query,
                )
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–∏–π HTML-–æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î (–±–µ–∑ —É—á–∞—Å—Ç–∏—è AI-—Ç–µ–∫—Å—Ç–∞)
            # 2-–π –ø—Ä–æ—Ö–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –ø—Ä–æ—Å–∏–º –ò–ò –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–ï –ñ–ï rows
            ai_formatted_output: Optional[str] = None
            try:
                if os.getenv("ANALYZE_WITH_AI_SECOND_PASS", "1") == "1":
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ Decimal/–¥–∞—Ç
                    compact: List[Dict[str, Any]] = []
                    for row in rows[:30]:
                        c: Dict[str, Any] = {}
                        for k, v in row.items():
                            if isinstance(v, Decimal):
                                c[k] = float(v)
                            elif isinstance(v, datetime.date):
                                c[k] = v.isoformat()
                            else:
                                c[k] = v
                        compact.append(c)
                    data_json = json.dumps(compact, ensure_ascii=False)

                    format_prompt = (
                        "–°—Ñ–æ—Ä–º–∏—Ä—É–π –°–¢–†–û–ì–û HTML –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî <b>–∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</b>; "
                        "–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ‚Äî '–ü–µ—Ä–∏–æ–¥: YYYY-MM-DD ‚Äî YYYY-MM-DD'; –¥–∞–ª–µ–µ –ø–æ —Å—Ç—Ä–æ–∫–µ: "
                        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> ‚Äî 12 345 678,90 ‚ÇΩ (–∏–ª–∏ –∫–≥/—à—Ç). –ß–∏—Å–ª–∞: –ø—Ä–æ–±–µ–ª—ã –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á, –∑–∞–ø—è—Ç–∞—è ‚Äî –¥–µ—Å—è—Ç–∏—á–Ω–∞—è. "
                        "–ù–ï –¥–æ–±–∞–≤–ª—è–π SQL, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —á–∏—Å–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ rows."
                    )
                    r2 = await client.chat.completions.create(
                        model=model,
                        messages=[
                            {"role": "system", "content": format_prompt},
                            {"role": "user", "content": data_json},
                        ],
                        response_format={"type": "json_object"},
                        temperature=0.1,
                    )
                    d2 = json.loads((r2.choices[0].message.content if r2.choices else "{}") or "{}")
                    if isinstance(d2.get("output"), str):
                        ai_formatted_output = d2["output"].strip()
            except Exception as e:
                logger.error(f"AI second-pass formatting error: {e}")

            def _valid_html(s: Optional[str]) -> bool:
                if not s:
                    return False
                if not s.strip().startswith("<b>"):
                    return False
                if not re.search(r"\n", s):
                    return False
                if not re.search(r"\n.+\s‚Äî\s", s):
                    return False
                return True

            if _valid_html(ai_formatted_output):
                output = ai_formatted_output
            else:
                # –ù–∞–¥—ë–∂–Ω—ã–π –ø—É—Ç—å: —Å—Ç—Ä–æ–∏–º –∏–∑ rows
                existing_title = None
                if output and output.strip().startswith("<b>"):
                    first_line = (output.strip().split("\n", 1)[0] or "").strip()
                    if first_line.endswith("</b>"):
                        existing_title = first_line
                if not existing_title:
                    safe_title = (text or "").strip().rstrip(':')
                    if safe_title:
                        existing_title = f"<b>{safe_title[0].upper() + safe_title[1:]}</b>"
                output = build_html_from_rows(rows, existing_title)
        except Exception as e:
            logger.error(f"SQL execution error: {e}")
            output = output or "<b>–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.</b>"
    else:
        logger.info("‚ùå AI DID NOT PROVIDE SQL_QUERY - NO DATABASE ACCESS")
        logger.info("‚ùå AI RESPONSE TYPE: General conversation (no data query)")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–ø–∫–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        if output:
            lines = (output or "").splitlines()
            if lines:
                first = lines[0].strip()
                if first.startswith("<b>") and first.endswith("</b>") and "–ü–µ—Ä–∏–æ–¥:" in first:
                    inner = first[3:-4].strip()
                    if "–ü–µ—Ä–∏–æ–¥:" in inner:
                        t, p = inner.split("–ü–µ—Ä–∏–æ–¥:", 1)
                        lines[0] = f"<b>{t.strip()}</b>"
                        lines.insert(1, f"–ü–µ—Ä–∏–æ–¥: {p.strip()}")
                # –ñ–∏—Ä–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—á–∞—Å—Ç—å –¥–æ ¬´ ‚Äî ¬ª), –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–∏–æ–¥–∞
                start_idx = 1
                if len(lines) > 1 and lines[1].strip().startswith("–ü–µ—Ä–∏–æ–¥:"):
                    start_idx = 2
                for i in range(start_idx, len(lines)):
                    if " ‚Äî " in lines[i]:
                        name, rest = lines[i].split(" ‚Äî ", 1)
                        if not name.strip().startswith("<b>"):
                            lines[i] = f"<b>{name.strip()}</b> ‚Äî {rest}"
            output = "\n".join(lines)
    except Exception:
        pass

    # –ü–∞–º—è—Ç—å (–≤—Å–µ–≥–¥–∞) ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ–±–º–µ–Ω
    try:
        await append_message(chat_id, "user", text)
        if output:
            await append_message(chat_id, "assistant", output)
    except Exception as e:
        logger.error(f"Memory append error: {e}")

    return AgentResult(
        output=output or "",
        send_excel=send_excel,
        table_data=table_data,
        sql_query=sql_query,
        send_card=send_card,
        rep_name=rep_name,
        recipient=recipient,
        subject=subject,
        body=body,
    )


async def process_chart_edit(chat_id: int, text: str, saved_config: Dict[str, Any]) -> AgentResult:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    client = get_client()
    model = os.environ.get("OPENAI_MODEL_CHAT", "gpt-4.1")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_prompt = f"""
–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞ Chart.js —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:
{json.dumps(saved_config, ensure_ascii=False, indent=2)}

–ö–û–ú–ê–ù–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {text}

–ü–†–ê–í–ò–õ–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø:
- "—É–±–µ—Ä–∏ –ª–µ–≥–µ–Ω–¥—É" ‚Üí "legend": {{"display": false}}
- "–ø–æ–∫–∞–∂–∏ –ª–µ–≥–µ–Ω–¥—É" ‚Üí "legend": {{"display": true}}
- "–ø–æ–º–µ–Ω—è–π —Ü–≤–µ—Ç–∞" ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞ –≤ backgroundColor/borderColor
- "—Å–¥–µ–ª–∞–π –±–æ–ª—å—à–µ" / "–±–æ–ª—å—à–µ" / "—É–≤–µ–ª–∏—á–∏" ‚Üí –¥–æ–±–∞–≤—å "width": 1000, "height": 800 –≤ –∫–æ—Ä–µ–Ω—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- "—Å–¥–µ–ª–∞–π –º–µ–Ω—å—à–µ" / "–º–µ–Ω—å—à–µ" / "—É–º–µ–Ω—å—à–∏" ‚Üí –¥–æ–±–∞–≤—å "width": 600, "height": 400 –≤ –∫–æ—Ä–µ–Ω—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- "–¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å–∏" ‚Üí "datalabels": {{"display": true}}
- "—É–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∏" ‚Üí "datalabels": {{"display": false}}
- "–∏–∑–º–µ–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ X" ‚Üí "title": {{"text": "X"}}
- "—Å–¥–µ–ª–∞–π –ª–∏–Ω–µ–π–Ω—ã–π" ‚Üí "type": "line"
- "—Å–¥–µ–ª–∞–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π" ‚Üí "type": "bar"
- "—Å–¥–µ–ª–∞–π –∫—Ä—É–≥–æ–≤–æ–π" ‚Üí "type": "pie"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""

    try:
        resp = await client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": edit_prompt}],
            response_format={"type": "json_object"},
            temperature=0.1,
        )
        content = resp.choices[0].message.content if resp.choices else "{}"
        updated_config = json.loads(content or "{}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_chart_config(chat_id, updated_config)
        
        return AgentResult(
            output="",  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç - —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫
            direct_chart=True,
            chart=updated_config,
            send_excel=False,
            table_data=[],
            sql_query=None,
        )
    except Exception as e:
        logger.error(f"Chart edit error: {e}")
        return AgentResult(
            output="<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            direct_chart=False,
            chart=None,
            send_excel=False,
            table_data=[],
            sql_query=None,
        )

