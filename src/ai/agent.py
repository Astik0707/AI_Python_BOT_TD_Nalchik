# src/ai/agent.py
from __future__ import annotations

import os
import json
from typing import List, Dict, Any, Optional

from src.utils.logger import get_logger
from src.utils.memory import append_message
from src.db.sql import execute_sql

from .models import AgentResult
from .openai_client import get_client
from .classifier import requires_database
from .messages import build_messages  # —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ –ë–î
from .sql_tools import strict_retry_sql_query, validate_and_sanitize_sql
from .renderer import render_rows, render_no_data, render_text_info

logger = get_logger("ai.agent")


async def run_ai_for_text(chat_id: int, text: str, user_id: Optional[int] = None, **kwargs) -> AgentResult:
    """–¢–æ–Ω–∫–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: LLM -> (sql_query) -> DB -> –∫—Ä–∞—Å–∏–≤—ã–π HTML.
    user_id –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    """
    if not text or not text.strip():
        return AgentResult(output="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    need_db = requires_database(text)
    messages = await build_messages(text, chat_id)

    client = get_client()
    model = os.environ.get("OPENAI_MODEL_CHAT", "gpt-4.1")

    # 1) –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: —Å—Ç—Ä–æ–≥–∏–π JSON (output/send_excel/table_data/sql_query)
    try:
        r = await client.chat.completions.create(
            model=model,
            messages=messages + [{
                "role": "system",
                "content": "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ë–î ‚Äî –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–µ—Ä–Ω–∏ sql_query –≤ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π."
            }],
            response_format={"type": "json_object"},
            temperature=0.0,
        )
        data = json.loads((r.choices[0].message.content if r.choices else "{}") or "{}")
        logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. send_excel={data.get('send_excel')}, send_card={data.get('send_card')}")
    except Exception as e:
        logger.error(f"AI request error: {e}")
        return AgentResult(
            output="<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            send_excel=False,
            table_data=[],
            sql_query=None,
        )

    output = (data.get("output") or "").strip()
    sql_query: Optional[str] = data.get("sql_query") or None

    # 2) –ï—Å–ª–∏ –ë–î –Ω—É–∂–Ω–∞, –Ω–æ sql_query –Ω–µ—Ç ‚Äî –∂—ë—Å—Ç–∫–æ ¬´–¥–æ–∂–∏–º–∞–µ–º¬ª
    if need_db and not sql_query:
        logger.warning("üö® SQL REQUIRED BUT MISSING ‚Äî STRICT RETRY")
        sql_query = await strict_retry_sql_query(messages, model)
        if not sql_query:
            return AgentResult(
                output=(
                    "<b>–ù—É–∂–µ–Ω SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å.</b>\n"
                    "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–∏–æ–¥, –º–µ—Ç—Ä–∏–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä—ã (–±—Ä–µ–Ω–¥/–º–µ–Ω–µ–¥–∂–µ—Ä/—Ä–µ–≥–∏–æ–Ω –∏ —Ç.–ø.)."
                ),
                send_excel=False,
                table_data=[],
                sql_query=None,
            )

    # 3) –í–µ—Ç–∫–∞ –±–µ–∑ –ë–î (small talk/—Å–ª—É–∂–µ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
    if not need_db:
        if not output:
            output = "–•–º‚Ä¶ –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–∏–æ–¥ –∏ –º–µ—Ç—Ä–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤—ã—Ä—É—á–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å¬ª)."
        res = render_text_info(output)
        await _remember(chat_id, text, res.output)
        return res

    # 4) –ï—Å—Ç—å sql_query ‚Üí –≤–∞–ª–∏–¥–∏—Ä—É–µ–º/—Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º ‚Üí –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –ë–î
    assert sql_query is not None
    val = await validate_and_sanitize_sql(sql_query)
    if not val.is_valid:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω¬ª)
        err = val.errors[0] if val.errors else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å."
        res = render_text_info(f"<b>{err}</b>")
        await _remember(chat_id, text, res.output)
        return res

    sanitized_sql = val.sanitized_sql
    try:
        logger.info("üöÄ CALLING DATABASE WITH SQL QUERY...")
        rows = await execute_sql(sanitized_sql)
        logger.info(f"‚úÖ DATABASE RESPONSE: {len(rows) if isinstance(rows, list) else 'unknown'} rows received")
    except Exception as e:
        logger.error(f"SQL execution error: {e}")
        res = render_text_info("<b>–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.</b>")
        await _remember(chat_id, text, res.output)
        return res

    if not rows:
        res = render_no_data(sanitized_sql)
        await _remember(chat_id, text, res.output)
        return res

    # 5) –ö—Ä–∞—Å–∏–≤—ã–π HTML –∫–∞–∫ –≤ n8n (–µ–¥–∏–Ω–∏—Ü—ã/—Ç—ã—Å—è—á–∏/–∑–∞–ø—è—Ç—ã–µ), Excel –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö
    result = render_rows(rows, text, existing_title=None, sql_query=sanitized_sql)

    # –ú—è–≥–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –±—ã–ª–∏) ‚Äî –≤–Ω–∏–∑—É –º–µ–ª–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    if val.warnings:
        warn = " ".join(val.warnings)
        result.output = result.output + f"\n\n<i>{warn}</i>"

    await _remember(chat_id, text, result.output)
    return result


async def _remember(chat_id: int, user_text: str, assistant_text: str) -> None:
    """–ö–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ –æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å."""
    try:
        await append_message(chat_id, "user", user_text)
        await append_message(chat_id, "assistant", assistant_text)
    except Exception:
        pass


async def process_chart_edit(chat_id: int, text: str, saved_config: Dict[str, Any]) -> AgentResult:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ."""
    return AgentResult(
        output="<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.</b>",
        send_excel=False,
        table_data=[],
        sql_query=None,
    )
