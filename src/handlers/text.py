from __future__ import annotations
import os
from typing import Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from src.db.auth import check_authorized_chat
from src.ai.agent import run_ai_for_text
from src.utils.html_sanitize import sanitize_html
from src.db.logs import log_interaction
from src.utils.logger import get_logger
from src.utils.memory import append_message, clear_history
from src.utils.debug import tg_debug, is_debug
from typing import List, Dict
import re

logger = get_logger("handlers.text")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_TEXT_LENGTH = 4096
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB


def validate_text(text: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not text or not text.strip():
        return False
    if len(text) > MAX_TEXT_LENGTH:
        return False
    return True


async def process_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = update.effective_chat.id
    user = update.effective_user
    text = update.effective_message.text or ''

    try:
        await tg_debug(context, chat_id, f"<code>recv:</code> {sanitize_html(text)}")

        # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑–µ
        if "–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" in text.lower():
            await clear_history(chat_id)
            await tg_debug(context, chat_id, "üîÅ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not validate_text(text):
            await context.bot.send_message(
                chat_id=chat_id, 
                text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ"
            )
            return



        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        logger.info(f"üîê –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è chat_id: {chat_id}")
        
        is_authorized = await check_authorized_chat(chat_id)
        logger.info(f"üîê –†–µ–∑—É–ª—å—Ç–∞—Ç check_authorized_chat({chat_id}): {is_authorized}")
        
        if not is_authorized:
            logger.warning(f"‚õî –û–¢–ö–ê–ó –í –î–û–°–¢–£–ü–ï –¥–ª—è chat_id: {chat_id}")
            await context.bot.send_message(
                chat_id=chat_id, 
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É"
            )
            await tg_debug(context, chat_id, "‚õî –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç")
            return

        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")
        await tg_debug(context, chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        ack_msg_id: Optional[int] = None
        try:
            ack = await context.bot.send_message(
                chat_id=chat_id,
                text="‚åõ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ"
            )
            ack_msg_id = ack.message_id
        except Exception:
            pass

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        try:
            await append_message(chat_id, "user", text)
            await tg_debug(context, chat_id, "üß† –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å")
        except Exception as e:
            await tg_debug(context, chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏: {e}")

        # 2) AI agent -> returns json contract
        await tg_debug(context, chat_id, "ü§ñ –ó–∞–ø—Ä–æ—Å –∫ AI...")
        result = await run_ai_for_text(
            chat_id=chat_id, 
            user_id=user.id if user else None, 
            user_name=user.full_name if user else None, 
            text=text
        )
        await tg_debug(context, chat_id, f"‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. send_excel={result.send_excel}, send_card={result.send_card}, chart={bool(result.chart)}")

        # –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω debug ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º SQL –∏ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        try:
            if await is_debug(chat_id):
                if result.sql_query:
                    await tg_debug(context, chat_id, f"<pre>{sanitize_html(result.sql_query)}</pre>")
                if result.table_data:
                    sample = result.table_data[:3]
                    await tg_debug(context, chat_id, f"<code>rows:</code> {sanitize_html(str(sample))}")
        except Exception:
            pass

        # 3) –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML
        html = sanitize_html(result.output)

        # 4) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -> –ø–æ–ª—É—á–µ–Ω–∏–µ log_id
        log_id = await log_interaction(
            chat_id,
            user.id if user else None,
            user.full_name if user else None,
            text,
            html,
            str(context.application.bot.id),
        )
        await tg_debug(context, chat_id, f"üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω id={log_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å
        try:
            if result.output:
                await append_message(chat_id, "assistant", result.output)
        except Exception:
            pass

        # 5) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        # –ì–µ–π—Ç–∏–Ω–≥ –ø–æ –¢–ó: –≥—Ä–∞—Ñ–∏–∫/Excel —Ç–æ–ª—å–∫–æ –ø–æ —è–≤–Ω–æ–π –ø—Ä–æ—Å—å–±–µ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞
        chart_intent = bool(re.search(r"–≥—Ä–∞—Ñ–∏–∫|–¥–∏–∞–≥—Ä–∞–º–º|–ª–∏–Ω–µ–π–Ω|—Å—Ç–æ–ª–±—á–∞—Ç|–∫—Ä—É–≥–æ–≤|pie|bar|line|doughnut", text.lower()))
        excel_intent = bool(re.search(r"\bexcel\b|—ç–∫—Å–µ–ª—å|—Ç–∞–±–ª–∏—Ü|–≤\s+excel|–≤\s+—ç–∫—Å–µ–ª—å|–æ—Ç–ø—Ä–∞–≤|–ø–æ—á—Ç|email|–µ–º–µ–π–ª", text.lower()))

        if result.send_excel:
            await tg_debug(context, chat_id, "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ Excel...")
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—á—Ç—É, –∏–Ω–∞—á–µ –≤ —á–∞—Ç
            if result.recipient:
                await handle_excel_request(context, chat_id, result)
            else:
                from src.handlers.excel_flow import send_excel_in_chat
                if result.table_data:
                    await send_excel_in_chat(context, chat_id, result.table_data)
                else:
                    await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel")
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if ack_msg_id:
                    await context.bot.delete_message(chat_id=chat_id, message_id=ack_msg_id)
            except Exception:
                pass
            return

        if result.send_card:
            await tg_debug(context, chat_id, f"üóÇÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {result.rep_name}")
            await handle_card_request(context, chat_id, result)
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if ack_msg_id:
                    await context.bot.delete_message(chat_id=chat_id, message_id=ack_msg_id)
            except Exception:
                pass
            return

        # 6) –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        if result.direct_chart and result.chart:
            await tg_debug(context, chat_id, "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            from src.services.charts.service import render_chart_to_png
            chart_png = render_chart_to_png(result.chart)
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ", 
                    callback_data=f"train:{log_id}"
                )
            ]])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±—É—á–µ–Ω–∏—è
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=chart_png,
                reply_markup=keyboard
            )
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if ack_msg_id:
                    await context.bot.delete_message(chat_id=chat_id, message_id=ack_msg_id)
            except Exception:
                pass
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –æ–±—É—á–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ", 
                    callback_data=f"train:{log_id}"
                )
            ]])
            
            await context.bot.send_message(
                chat_id=chat_id, 
                text=html, 
                parse_mode=ParseMode.HTML, 
                reply_markup=keyboard
            )
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if ack_msg_id:
                    await context.bot.delete_message(chat_id=chat_id, message_id=ack_msg_id)
            except Exception:
                pass
        await tg_debug(context, chat_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"Error processing text message: {e}", exc_info=True)
        await tg_debug(context, chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if 'ack_msg_id' in locals() and ack_msg_id:
                await context.bot.delete_message(chat_id=chat_id, message_id=ack_msg_id)
        except Exception:
            pass
        await context.bot.send_message(
            chat_id=chat_id, 
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )


async def handle_excel_request(context: ContextTypes.DEFAULT_TYPE, chat_id: int, result) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É Excel"""
    try:
        from src.handlers.excel_flow import send_excel_via_email
        
        recipient = result.recipient or 'default@example.com'
        subject = result.subject or '–û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É'
        body = result.body or '–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'
        
        if result.table_data:
            await send_excel_via_email(recipient, subject, body, result.table_data)
            await context.bot.send_message(
                chat_id=chat_id, 
                text=f"‚úÖ Excel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É: {recipient}"
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id, 
                text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel"
            )
    except Exception as e:
        logger.error(f"Error sending Excel: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        error_msg = str(e)
        if "Application-specific password required" in error_msg:
            user_msg = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP –ø–∞—Ä–æ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google.\n\n–°–º. —Ñ–∞–π–ª EMAIL_SETUP.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
        elif "SMTP credentials not configured" in error_msg:
            user_msg = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã SMTP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env —Ñ–∞–π–ª–µ.\n\n–î–æ–±–∞–≤—å—Ç–µ SMTP_USER –∏ SMTP_PASSWORD –≤ .env"
        elif "authentication failed" in error_msg.lower():
            user_msg = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: –ù–µ–≤–µ—Ä–Ω—ã–µ SMTP —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMTP_USER –∏ SMTP_PASSWORD –≤ .env"
        else:
            user_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: {e}"
        
        await context.bot.send_message(
            chat_id=chat_id, 
            text=user_msg
        )


async def handle_card_request(context: ContextTypes.DEFAULT_TYPE, chat_id: int, result) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        from src.handlers.cards import resolve_card_path
        cards_dir = os.environ.get("CARDS_DIR", "/home/adminvm/cards")

        rep = (result.rep_name or "").strip()

        if rep.lower() == "all":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
            sent_any = False
            for name in os.listdir(cards_dir):
                if not name.startswith("card_") or not name.endswith(".html"):
                    continue
                path = os.path.join(cards_dir, name)
                try:
                    if os.path.getsize(path) > MAX_FILE_SIZE:
                        continue
                    with open(path, 'rb') as f:
                        await context.bot.send_document(chat_id=chat_id, document=f, filename=name)
                        sent_any = True
                except Exception:
                    continue
            if not sent_any:
                await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏")
            return

        path = resolve_card_path(rep)

        if path and os.path.exists(path):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(path)
            if file_size > MAX_FILE_SIZE:
                await context.bot.send_message(
                    chat_id=chat_id, 
                    text="‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"
                )
                return
            with open(path, 'rb') as f:
                await context.bot.send_document(
                    chat_id=chat_id, 
                    document=f, 
                    filename=os.path.basename(path)
                )
        else:
            await context.bot.send_message(
                chat_id=chat_id, 
                text=f"‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ: {result.rep_name}"
            )
    except Exception as e:
        logger.error(f"Error sending card: {e}")
        await context.bot.send_message(
            chat_id=chat_id, 
            text="‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"
        )


async def handle_chart_request(context: ContextTypes.DEFAULT_TYPE, chat_id: int, result) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        from src.services.charts.service import render_chart_to_png
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìä CHART CONFIG: {result.chart}")
        
        chart_png = render_chart_to_png(result.chart)
        await context.bot.send_photo(chat_id=chat_id, photo=chart_png)
    except Exception as e:
        logger.error(f"Error generating chart: {e}")
        await context.bot.send_message(
            chat_id=chat_id, 
            text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞"
        )
