from __future__ import annotations
import os
from typing import Optional, List
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from src.utils.card_utils import get_available_cards, normalize_card_name


def create_cards_menu() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    """
    available_cards = get_available_cards()
    
    if not available_cards:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", callback_data="cards_error")
        ]])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    buttons = []
    row = []
    
    for i, card in enumerate(available_cards):
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data —Å –∏–Ω–¥–µ–∫—Å–æ–º
        safe_callback = f"card_{i:03d}"  # card_000, card_001, etc.
        button = InlineKeyboardButton(
            card["full_name"], 
            callback_data=safe_callback
        )
        row.append(button)
        
        # –ï—Å–ª–∏ –≤ —Ä—è–¥—É 2 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        if len(row) == 2:
            buttons.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏" –≤–Ω–∏–∑—É
    buttons.append([
        InlineKeyboardButton("üìÅ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∞—Ä—Ö–∏–≤)", callback_data="card_all")
    ])
    
    return InlineKeyboardMarkup(buttons)


def resolve_card_path(rep_name: str) -> Optional[str]:
    """
    –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å fuzzy matching.
    """
    if not rep_name:
        return None

    # 'all' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–∑–æ–≤–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞/–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)
    if rep_name.strip().lower() == "all":
        return None

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    card_info = get_card_info(rep_name)
    
    if card_info and card_info.get("found"):
        return card_info["filepath"]
    
    # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    cards_dir = os.environ.get("CARDS_DIR", "/home/adminvm/cards")
    normalized = normalize_card_name(rep_name)
    filename = f"card_{normalized}.html"
    filepath = os.path.join(cards_dir, filename)

    if os.path.exists(filepath):
        return filepath
    
    return None


def get_card_by_filename(filename: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    """
    available_cards = get_available_cards()
    
    for card in available_cards:
        if card["filename"] == filename:
            return card
    
    return None
