"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞
"""
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from src.utils.logger import get_logger
from src.db.pool import get_pool
import asyncio

logger = get_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
user_states = {}

async def handle_training_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ'"""
    logger.info(f"üéØ handle_training_feedback –≤—ã–∑–≤–∞–Ω –¥–ª—è update: {update}")
    
    query = update.callback_query
    chat_id = query.from_user.id
    
    logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω callback: {query.data} –¥–ª—è chat_id: {chat_id}")
    
    if not query.data.startswith("training_"):
        logger.info(f"‚ùå Callback –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'training_': {query.data}")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        logger.info(f"üîç –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: {query.data}")
        parts = query.data.split("_")
        logger.info(f"üîç –ß–∞—Å—Ç–∏ callback_data: {parts}")
        
        if len(parts) >= 2:  # training_624 -> 2 —á–∞—Å—Ç–∏
            log_id = int(parts[1])  # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å (–∏–Ω–¥–µ–∫—Å 1)
            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω log_id: {log_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[chat_id] = {
                "log_id": log_id,
                "waiting_for_comment": True
            }
            logger.info(f"üîç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_states[chat_id]}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ñ–æ—Ä–º—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            logger.info(f"üîç –í—ã–∑—ã–≤–∞–µ–º show_comment_form –¥–ª—è log_id: {log_id}")
            await show_comment_form(query, context, log_id)
            logger.info(f"‚úÖ show_comment_form –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ training feedback: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_comment_form(query, context, log_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_form_{log_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="comment_cancel")
        ]
    ]
    
    markup = InlineKeyboardMarkup(keyboard)
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
    message_text = (
        "üéØ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞**\n\n"
        "üí° **–ü–æ–º–æ–≥–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤!**\n\n"
        "**–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:**\n"
        "‚Ä¢ üîç –¢–æ—á–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞\n"
        "‚Ä¢ üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
        "‚Ä¢ üé® –£–¥–æ–±—Å—Ç–≤–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Ä¢ ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ üö´ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ üí≠ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
        "**–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**"
    )
    
    await query.edit_message_text(
        text=message_text,
        reply_markup=markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_comment_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    chat_id = query.from_user.id
    
    if query.data == "comment_cancel":
        await query.edit_message_text("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–º–µ–Ω–µ–Ω")
        if chat_id in user_states:
            del user_states[chat_id]
        return
    
    if query.data.startswith("comment_form_"):
        log_id = int(query.data.split("_")[2])  # comment_form_624 -> 3 —á–∞—Å—Ç–∏, –±–µ—Ä–µ–º —Ç—Ä–µ—Ç—å—é
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await show_comment_instructions(query, context, log_id)

async def show_comment_instructions(query, context, log_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if query.from_user.id in user_states:
        user_states[query.from_user.id]["log_id"] = log_id
        user_states[query.from_user.id]["waiting_for_comment"] = True
    
    message_text = (
        "‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**\n\n"
        "**–§–æ—Ä–º–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:**\n"
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\n"
        "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "‚Ä¢ \"–û—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\"\n"
        "‚Ä¢ \"–ì—Ä–∞—Ñ–∏–∫ –Ω–µ—á–∏—Ç–∞–µ–º—ã–π, –Ω—É–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π\"\n"
        "‚Ä¢ \"–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\"\n\n"
        "**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —á–∞—Ç:**"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="comment_cancel")]]
    markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message_text,
        reply_markup=markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_comment_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    chat_id = update.effective_chat.id
    comment_text = update.message.text
    
    if chat_id not in user_states or not user_states[chat_id].get("waiting_for_comment"):
        return
    
    try:
        log_id = user_states[chat_id]["log_id"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ë–î
        await save_comment_to_db(log_id, chat_id, comment_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await show_comment_confirmation(context, chat_id, comment_text)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[chat_id]
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        )

async def save_comment_to_db(log_id: int, chat_id: int, comment: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        pool = await get_pool()
        async with pool.acquire() as conn:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            await conn.execute('''
                UPDATE training_clicks 
                SET comment = $1, status = '–≤ –æ—á–µ—Ä–µ–¥–∏', clicked_at = NOW()
                WHERE log_id = $2 AND clicked_by = $3
            ''', comment, log_id, chat_id)
            
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if await conn.fetchval('SELECT COUNT(*) FROM training_clicks WHERE log_id = $1 AND clicked_by = $2', log_id, chat_id) == 0:
                await conn.execute('''
                    INSERT INTO training_clicks (log_id, clicked_by, chat_id, status, comment, clicked_at)
                    VALUES ($1, $2, $3, '–≤ –æ—á–µ—Ä–µ–¥–∏', $4, NOW())
                ''', log_id, chat_id, chat_id, comment)
            
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è log_id: {log_id}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –ë–î: {e}")
        raise

async def show_comment_confirmation(context: ContextTypes.DEFAULT_TYPE, chat_id: int, comment: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_comment = comment[:100] + "..." if len(comment) > 100 else comment
    
    message_text = (
        "‚úÖ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
        "üìù **–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n"
        f"_{display_comment}_\n\n"
        "üéØ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!**\n\n"
        "üí° –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ AI –∞–≥–µ–Ω—Ç–∞.\n"
        "–ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏.\n\n"
        "üöÄ **–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!**"
    )
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=message_text,
        parse_mode=ParseMode.MARKDOWN
    )

def is_waiting_for_comment(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–¥–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    return chat_id in user_states and user_states[chat_id].get("waiting_for_comment", False)

def get_user_state(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(chat_id)
