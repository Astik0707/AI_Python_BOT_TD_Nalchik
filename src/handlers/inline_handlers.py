from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from src.handlers.cards import get_card_by_filename, resolve_card_path
from src.utils.logger import get_logger
import os

logger = get_logger(__name__)


async def handle_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    """
    query = update.callback_query
    await query.answer()
    
    if not query.data:
        return
    
    chat_id = query.message.chat_id
    data = query.data
    
    logger.info(f"üéØ Inline callback: {data} –¥–ª—è chat_id: {chat_id}")
    
    try:
        if data == "cards_error":
            await query.edit_message_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        elif data == "card_all":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            await handle_all_cards(context, chat_id, query)
            return
            
        elif data.startswith("card_"):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            card_index = data[5:]  # –£–±–∏—Ä–∞–µ–º "card_" –∏–∑ –Ω–∞—á–∞–ª–∞
            await handle_single_card(context, chat_id, card_index, query)
            return
            
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_single_card(context: ContextTypes.DEFAULT_TYPE, chat_id: int, card_index: str, query):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    """
    try:
        from src.handlers.cards import get_available_cards
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        available_cards = get_available_cards()
        
        if not available_cards:
            await query.edit_message_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ —á–∏—Å–ª–æ
        try:
            index = int(card_index)
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if index < 0 or index >= len(available_cards):
            await query.edit_message_text("‚ùå –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        card_info = available_cards[index]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        filepath = card_info["filepath"]
        
        if not os.path.exists(filepath):
            await query.edit_message_text("‚ùå –§–∞–π–ª –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª
        with open(filepath, 'rb') as file:
            await context.bot.send_document(
                chat_id=chat_id,
                document=file,
                filename=card_info["filename"],
                caption=f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞: {card_info['full_name']}"
            )
        
        # –£–¥–∞–ª—è–µ–º inline –º–µ–Ω—é
        await query.edit_message_text(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {card_info['full_name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É {card_index}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏")


async def handle_all_cards(context: ContextTypes.DEFAULT_TYPE, chat_id: int, query):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    """
    try:
        from src.handlers.cards import get_available_cards
        
        available_cards = get_available_cards()
        
        if not available_cards:
            await query.edit_message_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await query.edit_message_text(f"üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(available_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        for card in available_cards:
            try:
                filepath = card["filepath"]
                
                if os.path.exists(filepath):
                    with open(filepath, 'rb') as file:
                        await context.bot.send_document(
                            chat_id=chat_id,
                            document=file,
                            filename=card["filename"],
                            caption=f"üìã {card['full_name']}"
                        )
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card['filename']}: {e}")
                continue
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.edit_message_text(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(available_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫",
            chat_id=chat_id,
            message_id=query.message.message_id
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫")


async def show_cards_menu(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    """
    try:
        from src.handlers.cards import create_cards_menu
        
        menu = create_cards_menu()
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è:",
            reply_markup=menu
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–µ–∫"
        )
