from __future__ import annotations
import asyncio
import os
from dataclasses import dataclass
from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

from src.utils.html_sanitize import sanitize_html
from src.handlers.router import handle_text_message, handle_voice_message, handle_callback
from src.utils.logger import setup_logging, get_logger
from src.db.pool import close_pool
from src.utils.debug import set_debug, is_debug

load_dotenv(dotenv_path=os.path.join(os.getcwd(), ".env"), override=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = get_logger("bot")

@dataclass
class Settings:
    telegram_token: str
    polling_interval: float


def read_settings() -> Settings:
    token = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
    return Settings(
        telegram_token=token,
        polling_interval=float(os.environ.get("POLLING_INTERVAL_SECONDS", "5")),
    )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        help_html = (
            "<b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "‚Äî –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü\n"
            "‚Äî –ê–ö–ë –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª\n"
            "‚Äî –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –±—Ä–µ–Ω–¥–∞–º –∑–∞ 3 –º–µ—Å—è—Ü–∞ (–≥—Ä–∞—Ñ–∏–∫)\n"
            "‚Äî –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ê–ª—å–±–æ—Ä–æ–≤ –§–µ–ª–∏–∫—Å –û–ª–µ–≥–æ–≤–∏—á\n"
            "‚Äî –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –≤ Excel –ò–≤–∞–Ω–æ–≤—É\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "‚Äî –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —è–≤–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ: –≥—Ä–∞—Ñ–∏–∫/–¥–∏–∞–≥—Ä–∞–º–º–∞/–ª–∏–Ω–µ–π–Ω—ã–π/—Å—Ç–æ–ª–±—á–∞—Ç—ã–π/–∫—Ä—É–≥–æ–≤–∞—è\n"
            "‚Äî –î–ª—è Excel –Ω–∞–ø–∏—à–∏—Ç–µ: –æ—Ç–ø—Ä–∞–≤—å –≤ Excel/—ç–∫—Å–µ–ª—å/—Ç–∞–±–ª–∏—Ü–µ–π –∫–æ–º—É-—Ç–æ\n"
            "‚Äî –ö–Ω–æ–ø–∫–∞ \"üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ\" –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É\n\n"
            "–ö–æ–º–∞–Ω–¥—ã: /debug_on, /debug_off ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=help_html,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")


async def debug_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await set_debug(chat_id, True)
    await context.bot.send_message(chat_id=chat_id, text="üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á—ë–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")


async def debug_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await set_debug(chat_id, False)
    await context.bot.send_message(chat_id=chat_id, text="‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã run_polling)."""
    try:
        settings = read_settings()

        telegram_base_url = os.getenv("TELEGRAM_API_BASE_URL")
        if telegram_base_url:
            app = Application.builder().token(settings.telegram_token).base_url(telegram_base_url).build()
            logger.info(f"Using Telegram API proxy: {telegram_base_url}")
        else:
            app = Application.builder().token(settings.telegram_token).build()
            logger.info("Using standard Telegram API")

        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("debug_on", debug_on))
        app.add_handler(CommandHandler("debug_off", debug_off))
        app.add_handler(CallbackQueryHandler(handle_callback))
        app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

        logger.info("Starting polling (PTB v21 run_polling)...")
        app.run_polling(
            poll_interval=settings.polling_interval,
            allowed_updates=Update.ALL_TYPES
        )

    except Exception as e:
        logger.error(f"Critical error in main: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î
        try:
            asyncio.run(close_pool())
        except Exception:
            pass
        logger.info("Application shutdown complete")


if __name__ == "__main__":
    main()
