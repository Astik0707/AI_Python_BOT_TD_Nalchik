from __future__ import annotations
from src.db.pool import fetch_one


async def check_authorized_chat(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–∞—Ç–∞"""
    from src.utils.logger import get_logger
    logger = get_logger("auth")
    
    logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è chat_id: {chat_id}")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è—é SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è chat_id: {chat_id}")
        row = await fetch_one("SELECT chat_id FROM bot_autorized_chats WHERE chat_id = $1;", (chat_id,))
        
        logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç SQL –∑–∞–ø—Ä–æ—Å–∞: {row}")
        
        is_authorized = bool(row)
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è chat_id {chat_id}: {is_authorized}")
        
        return is_authorized  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è chat_id {chat_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ
        return False
